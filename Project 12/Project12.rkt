#lang racket
(define (app a x)
   (if (null? x)
     (cons a '())
     (cons (car x) (app a (cdr x)))
   )
 )
(define (ins a p x)
   (if (= p 0)
     (cons a x)
     (cons (car x) (ins a (- p 1) (cdr x)))
   )
 )
(define (get p x)
   (if (= p 0)
     (car x)
     (get (- p 1) (cdr x))
   )
 )
(define (set p a x)
   (if (= p 0)
     (cons a (cdr x))
     (cons (car x) (set (- p 1) a (cdr x)))
   )
 )
(define (rem p x)
   (if (= p 0)
     (cdr x)
     (cons (car x) (rem (- p 1) (cdr x)))
   )
 )