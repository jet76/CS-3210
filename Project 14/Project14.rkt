#lang racket
(define (buildbst list)
  (if (null? list)
    '()
    (insert (lastLeaf list) (buildbst (restOfLeaves list)))
  )
)
(define (insert leaf tree)
  (if (null? tree)
    (cons leaf '( () () ))
    (if (< leaf (car tree))
      (makeBranches (car tree) (insert leaf (left tree)) (right tree))
      (makeBranches (car tree) (left tree) (insert leaf (right tree)))
    )
  )
)
(define (lastLeaf list)
  (if (eq? (cdr list) '())
    (car list)
    (lastLeaf (cdr list))
  )
)
(define (restOfLeaves list)
  (if (eq? (cdr list) '())
    '()
    (cons (car list) (restOfLeaves (cdr list)))
  )
)
(define (makeBranches root left right)
  (cons root (cons left (cons right '())))
)
(define (left tree)
  (car (cdr tree))
)
(define (right tree)
  (car (cdr (cdr tree)))
)
(define (iot tree)
  (if (null? tree)
    '()
    (merge (iot (left tree)) (cons (car tree) (iot (right tree))))
  )
)
(define (merge first rest)
  (if (null? first)
    rest
    (cons (car first) (merge (cdr first) rest))
  )
)